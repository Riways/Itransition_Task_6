@using Gma.DataStructures.StringSearch;

<MudGrid Class="align-content-center mt-16 " Justify="Justify.Center" id="greetingForm"  >
    <MudItem  xs="12"  md="6">
        <MudPaper Class="pa-10 overflow-auto" Elevation="3" >
            <MudForm >
                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem xs="12">
                     <MudAutocomplete T="string"    SearchFunc="@UserSearch" ValueChanged="@((e) => {RecipientChosen(e);})"  Variant="Variant.Outlined" ResetValueOnEmptyText="true"  AdornmentIcon="@Icons.Material.Filled.Search"   Label="Recipient name" Immediate="true" Required="true" RequiredError="User name is required!"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" ValueChanged="@((e) => {HandleTitleInput(e);})"  Variant="Variant.Outlined" InputType="InputType.Text" Immediate="true"  Required="true" Label="Title" RequiredError="Title is required!"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" ValueChanged="@((e) => {HandleMessageInput(e);})"  Variant="Variant.Outlined" Lines="5" Label="Message"  Required="true" RequiredError="Message should have a body!"/>
                    </MudItem>
                    <MudButton Class="d-block my-1 mx-3" Variant="Variant.Filled" Disabled="@(!_isValidTitle || !_isValidRecipientName || !_isValidMessage)" OnClick="@SendMessage"  Color="Color.Primary">SEND</MudButton>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
    @if (_recipient != null)
    {
        <MudItem  xs="12" md="6">
                <MudPaper Class="px-10 pb-5 overflow-auto" Elevation="3" Style="height:80vh;" >
                <MudGrid>
                    <MudItem xs="12" Class="d-flex justify-content-between pb-6 sticky-top"  Style="background-color:white;  ">
                        <MudText   Align="Align.Start"   Typo="Typo.h6" >@_recipient.Name:</MudText>
                        <MudText Align="Align.End" Typo="Typo.h6"  >You:</MudText>
                    </MudItem>
                    <MudItem xs="12" >
                        <MudExpansionPanels >
                            @foreach (var message in _messagesFromCurrentDialog)
                            {
                                    <MessageComponent   Client="@Client" Message="@message"/> 
                            }
                        </MudExpansionPanels>
                    </MudItem>
                </MudGrid>
                
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {

    [Parameter]
    public IUserService? UserService { get; set; }
    [Parameter]
    public UserModel?  Client{ get; set; }
    [Inject] 
    private IMessageService? _messageService{ get; set; }
    private UserModel? _recipient { get; set; } 
    private string? _currentTitle { get; set; } 
    private string? _currentMessage { get; set; }
    private List<MessageModel>? _messagesFromCurrentDialog { get; set; }

    private bool _isValidRecipientName { get; set; } = false;
    private bool _isValidTitle { get; set; } = false;
    private bool _isValidMessage { get; set; } = false;

    private UkkonenTrie<string>? _usernames;

    protected override async Task? OnInitializedAsync()
    {
        _usernames = UserService.GetAllUsernames();
    }

    private async Task<IEnumerable<string>> UserSearch(string input)
    {
        await Task.Delay(5);
        if (String.IsNullOrEmpty(input))
            return new string[0];
        var result = _usernames.Retrieve(input);
        return result;
    }

    private void HandleMessageInput(string messageBody)
    {
        _currentMessage = messageBody;
        _isValidMessage = messageBody.Length > 0 ? true : false;
    }

    private void HandleTitleInput(string title)
    {
        _currentTitle = title;
        _isValidTitle = title.Length > 0 ? true : false;
    }

    private void RecipientChosen(string recipientName)
    {
        if(recipientName == null)
        {
            _isValidRecipientName = false;
            _recipient = null;
            return;
        }
        _isValidRecipientName = true;
        _recipient = UserService.GetUserByUsername(recipientName);
        _messagesFromCurrentDialog = _messageService.GetMessagesFromDialog(Client.Id, _recipient.Id);
    }

    private void SendMessage()
    {
        lock (this)
        {
            DateTime dateBeforeSending = DateTime.UtcNow;
            MessageModel newMessage = new MessageModel(Client.Id, _currentTitle, _currentMessage, dateBeforeSending.AddMilliseconds(200));
            _messageService.SendMessage(Client.Id, _recipient.Id, newMessage);
            List<MessageModel> newMessages = _messageService.GetMessagesFromDialogAfterSpecifiedDate(Client.Id, _recipient.Id, dateBeforeSending);
            newMessages.AddRange(_messagesFromCurrentDialog);
            _messagesFromCurrentDialog = newMessages;
        }    
    }
}
